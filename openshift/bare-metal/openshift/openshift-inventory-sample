# This is an example of an OpenShift-Ansible host inventory that provides the
# minimum recommended configuration for production use. This includes 3 masters,
# two infra nodes, two compute nodes, and an haproxy load balancer to load
# balance traffic to the API servers. For a truly production environment you
# should use an external load balancing solution that itself is highly available.

[masters]
#
# This is an example 3 node master definition
#
openshift-test-master-node-[1:3].private.ossim.io

[etcd]
#
# We will put the etcd on all 3 mater nodes.  You can use another node(s) for the etcd services.
# I would at least use 2 nodes for etcd.
#
openshift-test-master-node-[1:3].private.ossim.io

[nodes]
# openshift_node_group_name must be provided for each node
# See 'Node Group Definition and Mapping' in the project README for more details
# the group names will automatically be mapped to the proper tag names for the nodes.
#
# In this example we configure the master node as both a master and infra.
# You can easily specify another set of nodes for your infra.  The infra will hold the internal router 
# and registry, ... etc.
#
openshift-test-master-node-[1:3].private.ossim.io openshift_node_group_name="node-config-master-infra"

#
# The ocmpute nodes are your main worker nodes where all of your pods will be distributed across.
#
openshift-test-compute-node-[1:6].private.ossim.io openshift_node_group_name="node-config-compute"

# GLUSTER NODES
#
# This is an example 6 node cluster.  You can do a 3 node cluster if you like.  We will need some kind
# of dynamic provisioning capability. The OpenShift installation scripts support gluster as an internally
# managed storage. In other words,  the scripts create a daemonset for all the gluster servers for each node
# in the gluster cluster.
#
openshift-test-glusterfs-[1:6].private.ossim.io openshift_node_group_name="node-config-compute"

[nfs]

[lb]
#
# This is a load balancer that loads balances the master nodes.  Right now this is only for the masters
# and will setup an HAProxy on this node for managing load blancing to the master nodes.  At his time you 
# will have to configure your own load balancer if you have mulitple infra nodes.
#
openshift-test-lb-node.private.ossim.io

# Create an OSEv3 group that contains the masters and nodes groups
#
# This is all the sections you wish to have active.  We will have a masters, nodes, etcd, lb and glusterfs
# section
#
[OSEv3:children]
masters
nodes
etcd
lb
#nfs
glusterfs

[glusterfs]
openshift-test-glusterfs-[1:6].private.ossim.io glusterfs_devices='["/dev/xvdb","/dev/xvdc"]'
#openshift-test-glusterfs-[1:6].private.ossim.io glusterfs_devices='["/dev/nvme1n1","/dev/nvme2n1"]'

[OSEv3:vars]
openshift_disable_check=memory_availability
ansible_user=centos
ansible_become=yes
openshift_deployment_type=origin
openshift_release="3.11"
#openshift_master_default_subdomain=example.io
openshift_master_cluster_public_hostname=openshift-test.ossim.io
openshift_docker_insecure_registries=["docker-registry.default.svc.cluster.local:5000"]

openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider'}]

# pregenerated htpasswd file.  If you have an htpasswd file already generated and ready to go with all your users
# then uncomment this and comment out the openshift_master_htpasswd_users
#openshift_master_htpasswd_file=/etc/origin/htpasswd

# this will generate one
#
# If you want to generate a htpasswd file it will put it under /etc/origin/master/htpasswd location.  It comes in 
# pairs separated by commas.  <Username?:<htpasswd hash>
#
# You can use the command:  
#       htpasswd -n <username>
# to generate a hash
openshift_master_htpasswd_users={"admin":"$apr1$/SVTdCha$88Z1FxrKwDBGPAwwNi7h21"}

openshift_hosted_registry_routehost="openshift-test-registry.ossim.io"
#reencrypt or passthrough
openshift_hosted_registry_routetermination=reencrypt
openshift_hosted_registry_routecertificates={'certfile': '/home/centos/ossim-io.pem', 'keyfile': '/home/centos/ossim-io.key', 'cafile': '/home/centos/ossim-io-ca.pem'}

# metircs install
openshift_metrics_install_metrics=true
openshift_metrics_hawkular_hostname=hawkular-metrics-test.ossim.io
openshift_metrics_hawkular_ca="/home/centos/ossim-io-ca.pem"
openshift_metrics_hawkular_cert="/home/centos/ossim-io.pem"
openshift_metrics_hawkular_key="/home/centos/ossim-io.key"

# Debug level for all OpenShift components (Defaults to 2)
debug_level=2

openshift_image_tag=v3.11.0
openshift_pkg_version=-3.11.0

#
# GLUSTER
#
openshift_storage_glusterfs_is_native=true
openshift_storage_glusterfs_heketi_is_native=true
openshift_storage_glusterfs_name="dynamic"
#openshift_storage_glusterfs_heketi_url=openshift-test-master-node-1.private.ossim.io
#openshift_storage_glusterfs_heketi_port=8080

#
# Certs
#
openshift_hosted_router_certificate={"certfile": "/home/centos/ossim-io.pem", "keyfile": "/home/centos/ossim-io.key", "cafile": "/home/centos/ossim-io-ca.pem"}
openshift_master_overwrite_named_certificates=true
openshift_master_named_certificates=[{"certfile": "/home/centos/ossim-io.pem", "keyfile": "/home/centos/ossim-io.key", "cafile": "/home/centos/ossim-io-ca.pem"}]